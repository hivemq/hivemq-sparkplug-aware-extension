name: Create Release
on:
  workflow_dispatch:
    branches:
      - main
      - feature/**
    inputs:
      version:
        description: 'Version to release (e.g. 0.0.0)'
        required: true
        default: '4.29.0'
      nextVersion:
        description: 'Next version for development (e.g. 0.0.0; do not include -SNAPSHOT)'
        required: true
        default: '4.30.0'
      preRelease:
        type: boolean
        description: 'Is this a pre-release?'
        required: true
        default: false

permissions:
  contents: write
  actions: write
  pull-requests: read

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ssh-key: ${{secrets.PS_RELEASE_SECRET}}

      - name: Validate versions
        run: |
          VERSION_REGEX="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"

          echo "Checking if version and nextVersion comply with semantic versioning..."
          if [[ ! "${{ github.event.inputs.version }}" =~ $VERSION_REGEX ]] || [[ ! "${{ github.event.inputs.nextVersion }}" =~ $VERSION_REGEX ]]; then
            echo "Error: version does not comply with semantic versioning! Use MAJOR.MINOR.PATCH pattern."
            exit 1
          fi

          echo "Checking if version and nextVersion are identical..."
          if [[ ( "${{ github.event.inputs.version }}" == "${{ github.event.inputs.nextVersion }}" ) ]]; then
            echo "Error: version and nextVersion may not be identical."
            exit 1
          fi

          echo "Checking if nextVersion is higher than version..."
          IFS='.' read -ra VERSION_ARR <<< "${{ github.event.inputs.version }}"
          IFS='.' read -ra NEXT_VERSION_ARR <<< "${{ github.event.inputs.nextVersion }}"

          for i in "${!VERSION_ARR[@]}"; do
            if (( NEXT_VERSION_ARR[i] < VERSION_ARR[i] )); then
              echo "Error: next version needs to be higher than release version"
              exit 1
            elif (( NEXT_VERSION_ARR[i] > VERSION_ARR[i] )); then
              break
            fi
          done

          echo "Checking if tag v${{ github.event.inputs.version }} already exists..."
          if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ github.event.inputs.version }} already exists!"
            exit 1
          fi

          echo "Creating release with version v${{ github.event.inputs.version }}."
          echo "Next version will be v${{ github.event.inputs.nextVersion }}-SNAPSHOT."

          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "NEXT_VERSION=${{ github.event.inputs.nextVersion }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Check pre-release
        run: |
          echo "Creating pre-release: ${{ github.event.inputs.preRelease }}"
          if [[ ${{ github.event.inputs.preRelease }} == "true" ]]; then
            echo "PRE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "Creating final release from ${{ env.BRANCH_NAME }}."
            if [[ "${{ env.BRANCH_NAME }}" != "main" ]]; then
              echo "Error: final releases can only be created from main branch."
              exit 1
            fi
            echo "PRE_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Set up JDK 11
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version: '11'
          distribution: 'temurin'
          check-latest: true
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@ac2d340dc04d9e1113182899e983b5400c17cda1 # v3.5.0

      - name: Setup git config
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "<>"

      - name: Release with Gradle
        run: ./gradlew release -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=${{ env.VERSION }} -Prelease.newVersion=${{ env.NEXT_VERSION }}-SNAPSHOT

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@e92187bd633e680ebfdd15961a7c30b2d097e7ad # v5
        with:
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}",
              "categories": [
                {
                    "title": "## Feature",
                    "labels": ["feat", "feature"]
                },
                {
                    "title": "## Fix",
                    "labels": ["fix", "bug"]
                },
                {
                    "title": "## Other",
                    "labels": []
                }
              ],
              "label_extractor": [
                {
                  "pattern": "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                  "target": "$1"
                }
              ],
            }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2
        with:
          name: Release v${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          prerelease: ${{ env.PRE_RELEASE }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            ./build/hivemq-extension/hivemq-sparkplug-aware-extension-*.zip
            ./build/hivemq-extension/hivemq-sparkplug-aware-extension-*.zip.sha256